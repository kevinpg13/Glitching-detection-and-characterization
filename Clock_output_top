library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity clock_out_top is
    Port ( 
        clk_in                      : in  STD_LOGIC;
        activate_corrupt_out_sw    : in  STD_LOGIC;
        activate_glitch_sig_out_sw : in  STD_LOGIC;
        glitch_state_button_in     : in  STD_LOGIC;
        increment_button_in        : in  STD_LOGIC;
        decrement_button_in        : in  STD_LOGIC;
        seed_button                : in  STD_LOGIC;
        reference_clk_out          : out STD_LOGIC;
        corrupted_clk_out          : out STD_LOGIC;
        glitch_signal_out          : out STD_LOGIC;
        ref_locked_led             : out STD_LOGIC;
        corrupted_clk_in           : in  STD_LOGIC;
        clean_locked_led           : out STD_LOGIC;
        clean_clk_out              : out STD_LOGIC;
        glitch_detect_out          : out STD_LOGIC;
        gpio_io_o                  : out std_logic_vector(15 downto 0)

    );
end clock_out_top;

architecture Behavioral of clock_out_top is
    -- Clock signals
    signal clk_ibuf           : STD_LOGIC;
    signal clk_global         : STD_LOGIC;
    signal clk_generated      : STD_LOGIC;
    signal fast_clk           : STD_LOGIC;
    signal clk_600mhz         : std_logic; 
    signal clean_clock        : STD_LOGIC;

    -- Glitch control
    signal glitch_gate        : STD_LOGIC := '0';
    signal glitch_active      : STD_LOGIC;
    signal glitch_mode        : STD_LOGIC := '0';
    signal glitch_mode_val    : STD_LOGIC;
    signal glitch_pwm_out     : STD_LOGIC;
    signal glitched_clk       : STD_LOGIC;

    -- Button debounce
    signal glitch_state_signal : STD_LOGIC := '0';
    signal captured            : STD_LOGIC := '0';
    signal incr_pulse          : STD_LOGIC;
    signal decr_pulse          : STD_LOGIC;

    -- LFSR and random value
    signal glitch_enable      : STD_LOGIC := '0';
    signal seed               : STD_LOGIC_VECTOR(15 downto 0);
    signal lfsr_output        : unsigned(15 downto 0);
    signal request_new_val    : STD_LOGIC;
    signal load_seed          : STD_LOGIC;
    --signal internal_glitch_req : STD_LOGIC;
    signal test_counter       : unsigned(27 downto 0) := (others => '0');
    signal int_glitch_req   : std_logic := '0';
    
    --Signal for Glitch Detection/Counter
    signal glitch_counter : unsigned(6 downto 0) := (others => '0');
    signal xor_result     : std_logic := '0';
    signal xor_prev       : std_logic := '0';
    signal glitching_done : std_logic := '1'; --Trigger For ILA
    signal glitch_pulse_seen : std_logic := '0';

    -- Dynamic glitch duration
    signal glitch_period      : unsigned(23 downto 0) := to_unsigned(10, 24);
    signal glitch_duty        : unsigned(23 downto 0) := to_unsigned(3, 24);
    constant STEP             : unsigned(23 downto 0) := to_unsigned(1, 24);
    constant MIN              : unsigned(23 downto 0) := to_unsigned(1, 24);
    constant MAX              : unsigned(23 downto 0) := to_unsigned(10, 24);
    
    --Signal Enable
    signal glitching_enabled : std_logic := '1';
    
    
    --Random signal
    signal target_counter    : unsigned(27 downto 0) := to_unsigned(95_000_000, 28); -- initial target
    signal glitch_ready      : std_logic := '0';
    signal pseudo_rand       : unsigned(27 downto 0) := to_unsigned(71_000_000, 28); -- seed or init value
    signal glitch_mode_toggle : std_logic := '0';

    
    --TDC signals
    signal tdc_code_latched : std_logic_vector(7 downto 0) := (others => '0');
    signal tdc_code       : std_logic_vector(7 downto 0) := (others => '0');


    -- PLL status
    signal reset              : STD_LOGIC := '0';
    signal pll_locked         : STD_LOGIC;
    signal clean_pll_locked   : STD_LOGIC;

    -- Glitch pulse handling
    signal pwm_prev           : STD_LOGIC := '1';
    signal glitch_pending     : STD_LOGIC := '0';
    


    -- Test and counter
    signal counter            : unsigned(24 downto 0) := (others => '0');
    signal led_test           : STD_LOGIC := '0';

    -- Glitch detection
    signal glitch_detected    : STD_LOGIC := '0';
    signal glitch_prev        : STD_LOGIC := '0';
    signal glitch_width_counter : unsigned(15 downto 0) := (others => '0');
    signal glitch_latched_high : STD_LOGIC := '0';
    signal glitch_raw         : STD_LOGIC := '0';
    signal glitch_edge        : STD_LOGIC := '0';
    signal glitch_state       : STD_LOGIC := '0';
    signal glitch_release_cnt : unsigned(3 downto 0);
    constant GLITCH_HOLD_TIME : unsigned(3 downto 0) := to_unsigned(2, 4);
    
    --Signal for UART
    signal type_hazard          : STD_LOGIC := '0';


    -- Component declarations
    component IBUF
        port ( I : in STD_LOGIC; O : out STD_LOGIC );
    end component;

    component BUFG
        port ( I : in STD_LOGIC; O : out STD_LOGIC );
    end component;

    component glitch_state_button
        Port ( clock : in STD_LOGIC; button : in STD_LOGIC; debounced_button : out STD_LOGIC );
    end component;

    component seedButton
        Port ( clock : in STD_LOGIC; button : in STD_LOGIC; debounced_button : out STD_LOGIC );
    end component;

    component incrementButton
        Port ( clk : in STD_LOGIC; button : in STD_LOGIC; pulse : out STD_LOGIC );
    end component;

    component decrementButton
        Port ( clk : in STD_LOGIC; button : in STD_LOGIC; pulse : out STD_LOGIC );
    end component;

    component clk_wiz_0
        port ( clk_in1 : in STD_LOGIC; reset : in STD_LOGIC; clk_out1 : out STD_LOGIC; locked : out STD_LOGIC );
    end component;

    component clk_wiz_1
        port ( clk_in1 : in STD_LOGIC; reset : in STD_LOGIC; clk_out1 : out STD_LOGIC;  clk_out2 : out STD_LOGIC; locked : out STD_LOGIC );
    end component;

    component clk_wiz_2
        port ( clk_in1 : in STD_LOGIC; reset : in STD_LOGIC; clk_out1 : out STD_LOGIC; locked : out STD_LOGIC );
    end component;
    
    component ila_0
        port (
            clk    : in STD_LOGIC;
            probe0 : in STD_LOGIC_VECTOR(7 downto 0);   -- glitch_counter
            probe1 : in STD_LOGIC;
            probe2 : in STD_LOGIC                      -- glitching_now
        );
    end component;


    component pwm_generator
        generic ( COUNTER_WIDTH : integer := 20 );
        port ( clk : in STD_LOGIC; duty_cycle : in unsigned(23 downto 0); period : in unsigned(23 downto 0); pwm_out : out STD_LOGIC );
    end component;

    component lfsr_bellcurve_approximated
        Port (
            clk         : in STD_LOGIC;
            enable      : in STD_LOGIC;
            seed        : in STD_LOGIC_VECTOR(15 downto 0);
            request_new : in STD_LOGIC;
            load_seed   : in STD_LOGIC;
            out_value   : out unsigned(15 downto 0)
        );
    end component;
    component seed_capture_module
        Port ( clk : in STD_LOGIC; button : in STD_LOGIC; seed_out : out STD_LOGIC_VECTOR(15 downto 0) );
    end component;

    component glitch_control_module
        Port (
            clk            : in STD_LOGIC;
            random_val     : in unsigned(15 downto 0);
            glitch_active  : in STD_LOGIC;
            glitch_req     : out STD_LOGIC;
            request_new    : out STD_LOGIC;
            glitch_mode_val: out STD_LOGIC
        );
    end component;
    
    component tdc
        Port (        
            pulse_in : in  STD_LOGIC;
            code     : out std_logic_vector(7 downto 0)              
        );
    end component;


begin

    -- Clock Buffering
    ibuf_inst : IBUF
        port map ( I => clk_in, O => clk_ibuf );

    bufg_inst : BUFG
        port map ( I => clk_ibuf, O => clk_global );

    -- Button Modules
    seed_button_module : seedButton
        port map ( clock => clk_global, button => seed_button, debounced_button => captured );

    increment_module : incrementButton
        port map ( clk => clk_global, button => increment_button_in, pulse => incr_pulse );

    decrement_module : decrementButton
        port map ( clk => clk_global, button => decrement_button_in, pulse => decr_pulse );

    glitch_state_switch : glitch_state_button
        port map ( clock => clk_global, button => glitch_state_button_in, debounced_button => glitch_state_signal );

    -- PLL Modules
    u_pll_slow : clk_wiz_0
        port map ( clk_in1 => clk_ibuf, reset => reset, clk_out1 => clk_generated, locked => pll_locked );

    u_pll_fast : clk_wiz_1
        port map ( clk_in1 => clk_ibuf, reset => reset, clk_out1 => fast_clk, clk_out2 => clk_600mhz, locked => open );

    u_pll_clean : clk_wiz_2
        port map ( clk_in1 => corrupted_clk_in, reset => reset, clk_out1 => clean_clock, locked => clean_pll_locked );

        
    ila_inst : ila_0
    port map (
        clk    => fast_clk,
        probe0 => std_logic_vector(tdc_code_latched),
        probe1 => xor_result,
        probe2 => glitching_done
    );
    
    tdc_top : tdc
    port map (
        pulse_in => xor_result,
        code     => tdc_code
    );

    -- PWM Generator for Glitch Pulse
    glitch_gen : pwm_generator
        generic map ( COUNTER_WIDTH => 24 )
        port map (
            clk => fast_clk,
            period => glitch_period,
            duty_cycle => glitch_duty,
            pwm_out => glitch_pwm_out
        );
       
    -- Seed Capture Module
    seed_capture_inst : seed_capture_module
        port map (
            clk => clk_global,
            button => captured,
            seed_out => seed
        );

    -- LFSR Module
    lfsr_inst : lfsr_bellcurve_approximated
        port map (
            clk         => clk_global,
            enable      => glitch_enable,
            seed        => seed,
            request_new => request_new_val,
            load_seed   => captured,
            out_value   => lfsr_output
        );

    -- Glitch Control Module
    glitch_ctrl : glitch_control_module
        port map (
            clk            => clk_generated,
            random_val     => lfsr_output,
            glitch_active  => glitch_gate,
            glitch_req     => open,
            request_new    => request_new_val,
            glitch_mode_val=> glitch_mode_val
        );
        -- TDC module 
    
    -- Duty-only Control Logic 10%-90%
    process(clk_global)
    begin
        if rising_edge(clk_global) then
            if incr_pulse = '1' and glitch_duty <  MAX - 1 then
                glitch_duty <= glitch_duty + STEP;
            elsif decr_pulse = '1' and glitch_duty > MIN then
                glitch_duty <= glitch_duty - STEP;
            end if;
        end if;
    end process;

   process(clk_generated)
    begin
        if rising_edge(clk_generated) then
    
            -- Increment test counter
            test_counter <= test_counter + 1;
    
            -- Trigger glitch if counter hits target
            if test_counter = target_counter then
                int_glitch_req <= '1';
                glitch_ready   <= '1';
                glitching_done  <= '0';
            else
                int_glitch_req <= '0';
            end if;
    
            -- Once glitch is triggered, assign new pseudo-random target
            if glitch_ready = '1' then
                -- Simple pseudo-random generator: rotate + add
                pseudo_rand <= pseudo_rand(25 downto 0) & pseudo_rand(27 downto 26);
                target_counter <= (pseudo_rand mod to_unsigned(90_000_000, 28)) + to_unsigned(50_000_000, 28);  -- [50M to 140M]
                glitch_ready   <= '0';
                glitch_mode_toggle <= not glitch_mode_toggle;  -- Alternate mode every glitch
            end if;
    
            -- Stop glitching after 7.5s (optional)
            if test_counter > to_unsigned(95_000_000, 28) then
                glitching_enabled <= '0';
              
            end if;
        end if;
    end process;

--process(clk_generated)
--    begin
--        if rising_edge(clk_generated) then
--            if test_counter < to_unsigned(150_000_000, 28) then
--                test_counter <= test_counter + 1;
--            end if;
        
--            -- Trigger glitch and set glitching_now HIGH at specific times
--            if test_counter = to_unsigned(100_000_000, 28) then
--               -- test_counter = to_unsigned(27_000_000, 28) or
--             --   test_counter = to_unsigned(34_000_000, 28) or
--             --  test_counter = to_unsigned(38_000_000, 28) or  -- 2s
--              --test_counter = to_unsigned(100_000_000, 28) or  -- 5s
--              --test_counter = to_unsigned(133_000_000, 28) then  -- 7s
--                int_glitch_req <= '1';
--            else
--                int_glitch_req <= '0';
--            end if;
        
--            -- Disable glitching forever after 7s
--            if test_counter > to_unsigned(150_000_000, 28) then
--                glitching_done  <= '0';  
--                glitching_enabled <= '0';
--            end if;
--        end if;
--    end process;



    -- Glitch Gate Logic
    process(fast_clk)
        begin
            if rising_edge(fast_clk) then
                if int_glitch_req = '1' then  -- now using the actual LFSR-driven glitch request
                    glitch_pending <= '1';
                end if;
        
                if pwm_prev = '1' and glitch_pwm_out = '0' and glitch_pending = '1' then
                    glitch_gate <= '1';
                    glitch_mode <= glitch_mode_toggle;
                    glitch_pending <= '0';
                end if;
        
                if glitch_gate = '1' and glitch_pwm_out = '1' then
                    glitch_gate <= '0';
                end if;
        
                pwm_prev <= glitch_pwm_out;
            end if;
        end process;

       
    -- Glitch Generation Logic
    process(glitch_state_signal, clk_generated, glitch_pwm_out, glitch_gate)
    begin
        if glitch_gate = '1' then
            if glitch_mode = '1' then
                glitched_clk <= clk_generated AND glitch_pwm_out;
            else
                glitched_clk <= clk_generated OR (NOT clk_generated AND NOT glitch_pwm_out);
            end if;
        else
            glitched_clk <= clk_generated;
        end if;
    end process;

    -- LED Assignments
    ref_locked_led <= pll_locked;
    clean_locked_led <= clean_pll_locked;

    -- Output Logic
    reference_clk_out <=  clk_generated;
    corrupted_clk_out <= glitched_clk when glitching_enabled = '1' else '0';
    glitch_signal_out <= glitch_pwm_out;
    clean_clk_out <= clean_clock;
    glitch_detect_out <= glitch_state;
    
    
        process(clk_600mhz)
    begin
        if rising_edge(clk_600mhz) then
            -- Latch TDC code only when it's non-zero
            if tdc_code /= "00000000" then
                tdc_code_latched <= tdc_code;
            end if;
    
            -- XOR glitch detection
            xor_result <= glitched_clk xor clk_generated;
    
            if xor_result = '1' and glitch_pulse_seen = '0' then
                glitch_counter <= glitch_counter + 1;
                glitch_pulse_seen <= '1';
    
                -- Determine hazard type based on clk_generated level
                if clk_generated = '1' then
                    type_hazard <= '1';
                else
                    type_hazard <= '0';
                end if;
    
            elsif xor_result = '0' then
                glitch_pulse_seen <= '0';
            end if;
        end if;
    end process;


    
    -- First bit: glitch state, next 8 bits: tdc time code: last 7 bits glitch counter.
    gpio_io_o <= type_hazard & tdc_code_latched & std_logic_vector(glitch_counter);
    
end Behavioral;
